package data;

import java.util.ArrayList;
import java.util.Comparator;

public class Group {
    private static ArrayList<Organization> boats = new ArrayList<>();

    public Group() {
        //ArrayList<Boat> boats = new ArrayList<>();
        /*boats.add(new InsuranceCompany("Ледокол1", 0, 12000, 50));
        boats.add(new ShipbuildingCompany("Парусник1", 1, "Reykovie", 3));
        boats.add(new AircraftFactory("Пароход1", 2, "Coals", 25));
        boats.add(new InsuranceCompany("Ледокол2", 3, 15900, 40));
        boats.add(new InsuranceCompany("Ледокол3", 4, 15090, 80));
        boats.add(new InsuranceCompany("Ледокол4", 5, 19700, 4));
        boats.add(new InsuranceCompany("Ледокол5", 6, 19010, 60));
        boats.add(new InsuranceCompany("Ледокол6", 7, 15930, 90));
        boats.add(new AircraftFactory("Пароход2", 8, "Coals2", 30));
        boats.add(new ShipbuildingCompany("Парусник2", 9, "Reykovie", 7));*/
    }

    public static boolean addAircraftFactory(String name, int id, String type_of_fuel) {

        // Проверка наличия корабля с таким же id в списке
        for (Organization boat : boats) {
            if (boat.getId() == id) {
                System.out.println("Корабль с таким ID уже существует.");
                return false; // Завершаем метод, так как корабль уже существует
            }
        }
        AircraftFactory steamboat = new AircraftFactory(name, id, type_of_fuel);
        boats.add(steamboat);
        System.out.println("Пароход успешно добавлен.");
        return true;
    }
    public static boolean addShipbuildingCompany(String name, int id, String type_of_sails) {
        // Проверка наличия корабля с таким же id в списке
        for (Organization boat : boats) {
            if (boat.getId() == id) {
                System.out.println("Корабль с таким ID уже существует.");
                return false; // Завершаем метод, так как корабль уже существует
            }
        }
        ShipbuildingCompany sailboat = new ShipbuildingCompany(name, id, type_of_sails);
        boats.add(sailboat);
        System.out.println("Парусник успешно добавлен.");
        return true;
    }
    public static boolean addInsuranceCompany(String name, int id, int power) {
        // Проверка наличия корабля с таким же id в списке
        for (Organization boat : boats) {
            if (boat.getId() == id) {
                System.out.println("Корабль с таким ID уже существует.");
                return false; // Завершаем метод, так как корабль уже существует
            }
        }
        InsuranceCompany icebreaker = new InsuranceCompany(name, id, power);
        boats.add(icebreaker);
        System.out.println("Ледоход успешно добавлен.");
        return true;
    }

    //Методы работы со списком
    public void deleteBoat(int id) {
        int indexToRemove = -1; // Инициализируем переменную для хранения индекса элемента для удаления
        for (int i = 0; i < boats.size(); i++) {
            if (boats.get(i).getId() == id) {
                indexToRemove = i; // Нашли индекс элемента для удаления
                break;
            }
        }
        if (indexToRemove != -1) { // Если был найден элемент для удаления
            boats.remove(indexToRemove); // Удаляем элемент по найденному индексу
            System.out.println("Корабль успешно удален.");
        } else {
            System.out.println("Корабль с таким ID не найден.");
        }
    }


    public static void searchBoat(ArrayList<Organization> boats, int id) {
        boolean found = false;
        for (Organization boat : boats) {
            if (boat.getId() == id) {
                found = true;
                if (boat instanceof ShipbuildingCompany) {
                    ShipbuildingCompany sailboat = (ShipbuildingCompany) boat;
                    sailboat.sail();
                    System.out.println("Корабль найден:");
                    System.out.println("Название парусника : " + sailboat.getName() + ", ID: " + sailboat.getId() + ", Количество парусов: " + sailboat.getNumber_of_sails() + ", Тип парусов: " + sailboat.getType_of_sails());
                } else if (boat instanceof AircraftFactory) {
                    AircraftFactory steamboat = (AircraftFactory) boat;
                    steamboat.sail();
                    System.out.println("Корабль найден:");
                    System.out.println("Название парохода: " + steamboat.getName() + ", ID: " + steamboat.getId() + ", Тип топлива: " + steamboat.gettype_of_fuel() + ", Скорость: " + steamboat.getSpeed());
                } else if (boat instanceof InsuranceCompany) {
                    InsuranceCompany icebreaker = (InsuranceCompany) boat;
                    icebreaker.sail();
                    System.out.println("Корабль найден:");
                    System.out.println("Название ледохода: " + icebreaker.getName() + ", ID: " + icebreaker.getId() + ", Мощность: " + icebreaker.getPower() + ", Максимальная толщина льда: " + icebreaker.getMax_thickness_of_ice());
                }
                break;
            }
        }
        if (!found) {
            System.out.println("Корабль с таким ID не найден.");
        }
    }
    public int getCount() {
        return this.boats.size();
    }

    public static Organization getBoat(int index) {
        return boats.get(index);
    }
    public static Organization getBoatByID(int index) {
        for (Organization boat : boats) {
            if (boat.getId() == index)
                return boat;
        }
        return null;
    }


    public void remove(int ind) {
        this.boats.remove(ind);
    }
    public static String getNextAvailableId() {
        ArrayList<Integer> ids = new ArrayList<>();
        for (Organization boat : boats) {
            ids.add(boat.getId());
        }
        int nextId = 0;
        while (ids.contains(nextId)) {
            nextId++;
        }
        return String.valueOf(nextId);
    }

    public static void sortlist() {
        for (int i = 0; i < boats.size() - 1; i++) {
            for (int j = i + 1; j < boats.size(); j++) {
                Organization boat1 = boats.get(i);
                Organization boat2 = boats.get(j);
                if (boat1.getId() > boat2.getId()) {
                    // Поменять объекты местами
                    boats.set(i, boat2);
                    boats.set(j, boat1);
                }
            }
        }
    }
    public static boolean searchMethod(int id) {
        for (int i = 0; i < boats.size(); i++) {
            Organization boat = boats.get(i);
            if (boat.getId() == id) {
                // Обменять местами объекты
                Organization firstBoat = boats.get(0);
                boats.set(0, boat);
                boats.set(i, firstBoat);
                System.out.println(boats.get(0));
                return true; // Завершить метод после перемещения объекта
            }
        }
        // Если объект с заданным id не найден, можно вывести сообщение или выполнить другие действия
        System.out.println("Корабль с id " + id + " не найден.");
        return false;
    }


    public static boolean str_is_null(String str) {
        return str.isEmpty();

    }
    public static void sortList(int sort) {
        switch (sort) {
            case 1:
                boats.sort(Comparator.comparingInt(Organization::getBoatType_Steamboat));
                break;
            case 2:
                boats.sort(Comparator.comparingInt(Organization::getBoatType_Sailboat));
                break;
            case 3:
                boats.sort(Comparator.comparingInt(Organization::getBoatType_Icebreaker));
                break;
        }

    }
}